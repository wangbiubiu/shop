<?php

namespace frontend\controllers;

use app\models\Cart;
use backend\models\Goods;
use frontend\models\Address;
use frontend\models\Order;
use frontend\models\OrderGoods;
use Yii;
use yii\db\Exception;
use yii\helpers\Url;

class OrderController extends \yii\web\Controller
{
    public function behaviors()
    {
        return [
            //基于存取的权限控制器主要是要配置此过滤器
            'access' => [
                'class' => 'yii\filters\AccessControl',
                'rules' => [
                    [
                        'allow' => 'true',     //允许请求
                        'actions' => ['index','list','del'],        //允许请求的方法
                        'roles' => ['@']        //允许以登陆状态请求
                    ],
                ]
            ]
        ]; // TODO: Change the autogenerated stub
    }
    public function actionIndex()
    {

//        订单确认页面
        $member_id=\Yii::$app->user->identity->id;

        if(\Yii::$app->request->isPost){
            $transaction = \Yii::$app->db->beginTransaction();
            try{
                //创建订单
                $order = new Order();
                //收货人信息
                $address          = Address::findOne([ 'id' => Yii::$app->request->post( 'address_id' )]);
//                var_dump($address);exit;
                $order->member_id = $member_id;
                $order->name      = $address->name;
                $order->province  = $address->cmbProvince;
                $order->city      = $address->cmbCity;
                $order->area      = $address->cmbArea;
                $order->tel       = $address->tel;
                $order->address   = $address->address;
                //                配送方式
                $order->delivery_id    = Yii::$app->request->post( 'delivery_id' );
                $order->delivery_name  = Order::$deliveries[ $order->delivery_id ][0];
                $order->delivery_price = Order::$deliveries[ $order->delivery_id ][1];
                //支付方式
                $order->payment_id   = Yii::$app->request->post( 'payment_id' );
//                var_dump(Yii::$app->request->post( 'payment_id' ));exit;
                $order->payment_name = Order::$payments[$order->payment_id][0];
                $order->total        = Yii::$app->request->post( 'total' );
                //                待付款
                $order->status = 1;
                if( $order->validate() ){
                    //保存订单
                    $order->save();
                }else{
                    //提示错误信息
                    var_dump($order->getErrors());
                    exit;
                }
                //依次检查购物车的商品库存
                $carts = Cart::findAll( [ 'member_id' =>$member_id]);
                foreach( $carts as $cart ){
                    //检查该商品库存是否足够 $cart=[goods_id=>1,amount=>22];
                    //获取商品表中对应商品的库存
                    $goods = Goods::findOne( [ 'id' => $cart->goods_id ] );
                    if( $goods->stock < $cart->amount ){
                        //抛出异常
//                        return 111;
//                        echo $goods->name;exit;
                        throw new Exception( "$goods->name"."商品库存不足，请返回购物车修改" );
                    }
                    //库存足够，扣减库存，生成订单商品详情数据
                    //创建订单详情表记录
                    $order_goods      = new OrderGoods();
                    $order_goods->order_id =$order->id;
                    $order_goods->goods_id =$goods->id;
                    $order_goods->goods_name=$goods->name;
                    $order_goods->logo=$goods->logo;
                    $order_goods->price=$goods->market_price;
                    $order_goods->amount=$cart->amount;
                    $order_goods->total=$goods->market_price*$cart->amount;
                    if($order_goods->validate()){
                    $order_goods->save();
                    //扣减库存
                    Goods::updateAllCounters( [ 'stock' => -$cart->amount ], [ 'id' => $cart->goods_id ] );
                    //删除购物车
                        Cart::deleteAll(['goods_id'=>$cart->goods_id,'member_id'=>$member_id]);
                    }else{
//                        return 1111;
                        var_dump($order_goods->getErrors());exit;
                    }
                }
                //提交事务
                $transaction->commit();
                //跳转到订单提交成功页面
                return $this->redirect(['order/list']);

            }catch( Exception $e ){
//                echo 111;
                //如果不够回滚
                $url=Url::to(['cart/cart']);
                echo $e->getMessage(),"<a href='$url'>返回</a>";
                $transaction->rollBack();
//                var_dump($e);exit;
            }
        }else{
        $addModels=Address::findAll(['member_id'=>$member_id]);
        $column=Cart::find()->select('goods_id')->where(['=','member_id',$member_id])->column();
        //            var_dump($models);exit;
        $models = Goods::find()->where(['in','id',$column])->all();
        $cartsModedl=Cart::find()->select('goods_id,amount')->where(['=','member_id',$member_id])->asArray()->all();
        $carts=[];
        foreach($cartsModedl as $key=>$value){
            $carts[$value['goods_id']]=$value['amount'];
        }
        return $this->render('order',['addModels'=>$addModels,'models'=>$models,'carts'=>$carts]);
        }
    }
    public function actionList(){
        $models=OrderGoods::find()->all();
        return $this->render('list',['models'=>$models]);
    }
    public function actionDel($id){
        $models=OrderGoods::findOne($id);
        $models->delete();
        return $this->redirect(['order/list']);
    }
}
